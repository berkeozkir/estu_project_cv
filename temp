#ifndef TYPE_H
#define TYPE_H

#include <stdint.h>

// Define a bit field structure representing 1 byte as 8 individual bits
typedef struct {
    uint8_t bit0 : 1;
    uint8_t bit1 : 1;
    uint8_t bit2 : 1;
    uint8_t bit3 : 1;
    uint8_t bit4 : 1;
    uint8_t bit5 : 1;
    uint8_t bit6 : 1;
    uint8_t bit7 : 1;
} JBIT_t;

// Define a union allowing access to a byte either as bits or a full byte
typedef union Byte_s {
    JBIT_t bits;
    uint8_t dataU8;
} BYTE_t;

// Define a union allowing access to a 16-bit word as two bytes or a full word
typedef union WORD16_s {
    struct {
        BYTE_t lowByte;
        BYTE_t highByte;
    };
    uint16_t dataU16;
} WORD16_t;

// Define a union allowing access to a 32-bit word as two 16-bit words or a full word
typedef union WORD32_s {
    struct {
        WORD16_t low16;
        WORD16_t high16;
    };
    uint32_t dataU32;
} WORD32_t;

#endif // TYPE_H